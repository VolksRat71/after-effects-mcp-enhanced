⚠️ IMPORTANT: YOUR ROLE IS TO TEST ONLY
--------------------------------------------
DO NOT:
- Fix code issues
- Modify source files
- Attempt to debug problems

DO:
- Execute tests as documented
- Report results (success/failure)
- Document any errors or unexpected behavior
- Verify file outputs

============================================
SETUP REQUIREMENTS
============================================

BEFORE TESTING:
- After Effects is running with the updated MCP Bridge Auto panel installed
- MCP Bridge Auto panel is open
- Auto-run checkbox is enabled in the panel
- You have an open After Effects project with at least one composition

ASSUMPTIONS:
- Build and panel installation has already been completed
- You have an open After Effects project
- Project contains at least one composition
- You know the composition name to use in tests
- MCP Bridge Auto panel is running and monitoring commands

============================================
ARCHITECTURE: PANEL-BASED EXECUTION
============================================

HOW RENDER TOOLS WORK:
1. Call render-frame or render-frames-sampled tool
   → Tool returns: "Command has been queued"

2. Panel executes command in After Effects
   → Adds items to render queue
   → Renders frames to build/temp/ directory

3. Panel writes results to ae_mcp_result.json

4. Call get-results tool
   → Retrieves render results with metadata

KEY POINT: Render tools are ASYNCHRONOUS. You must call get-results
after the render completes to see the actual results.

============================================
TEST EXECUTION
============================================

BEFORE EACH TEST:
- Identify composition name in your open project
- Replace "<comp-name>" in test parameters with actual comp name
- Ensure render queue is empty or monitor it

TEST 1: Single Frame Render (Basic)
------------------------------------
Purpose: Verify basic single frame rendering

Step 1: Call render-frame tool
Parameters:
{
  "comp": "<comp-name>",
  "format": "png"
}

Expected Response:
- Message: "Command to render frame from composition '<comp-name>' has been queued"
- Output path shown: build/temp/frame_<timestamp>_<uuid>.png
- Instructions to call get-results

Step 2: Wait for render to complete
- Watch After Effects render queue
- Wait until render finishes

Step 3: Call get-results tool
Parameters: (none)

Expected Response:
{
  "success": true,
  "comp": "<comp-name>",
  "frame": <frame-number>,
  "time": <time-in-seconds>,
  "width": <comp-width>,
  "height": <comp-height>,
  "outputPath": "build/temp/frame_<timestamp>_<uuid>.png"
}

Step 4: Verify file exists
- Check that the file at outputPath exists
- Verify it's a valid PNG image

PASS CRITERIA:
✓ Tool queues command successfully
✓ Render completes without errors
✓ get-results returns success with metadata
✓ PNG file exists at outputPath


TEST 2: Single Frame Render (Specific Time)
--------------------------------------------
Purpose: Verify rendering at specific time

Step 1: Call render-frame tool
Parameters:
{
  "comp": "<comp-name>",
  "time": 1.5,
  "format": "png"
}

Expected: Frame rendered at exactly 1.5 seconds

Step 2-4: Same as TEST 1

Verify in results:
- "time": 1.5
- "frame": should be 1.5 * comp.frameRate

PASS CRITERIA:
✓ Frame rendered at correct time
✓ File created successfully


TEST 3: Single Frame Render (Specific Frame Number)
----------------------------------------------------
Purpose: Verify rendering by frame number

Step 1: Call render-frame tool
Parameters:
{
  "comp": "<comp-name>",
  "frame": 30,
  "format": "jpg"
}

Expected: Frame 30 rendered as JPG

Step 2-4: Same as TEST 1

Verify in results:
- "frame": 30
- outputPath ends with .jpg
- JPG file exists

PASS CRITERIA:
✓ Correct frame rendered
✓ JPG format used


TEST 4: Single Frame with Inline Data
--------------------------------------
Purpose: Verify base64 inline image data

Step 1: Call render-frame tool
Parameters:
{
  "comp": "<comp-name>",
  "inline": true,
  "format": "png"
}

Step 2-4: Same as TEST 1

Verify in results:
- Has "inlineData" field
- inlineData starts with "data:image/png;base64,"
- inlineData is a valid base64 string

PASS CRITERIA:
✓ inlineData field present
✓ Proper data URI format


TEST 5: Sampled Frames (sampleCount)
-------------------------------------
Purpose: Verify sampling with count strategy

Step 1: Call render-frames-sampled tool
Parameters:
{
  "comp": "<comp-name>",
  "startTime": 0,
  "endTime": 3,
  "sampleCount": 5,
  "format": "png"
}

Expected Response:
- Message: "Command to render sampled frames... has been queued"
- Session directory shown: build/temp/session_<id>/

Step 2: Wait for render
- Multiple items added to render queue
- All frames render sequentially

Step 3: Call get-results

Expected Response:
{
  "success": true,
  "comp": "<comp-name>",
  "samplingMode": "sampleCount",
  "framesRendered": 5,
  "sessionDir": "build/temp/session_<id>/",
  "frames": [
    { "index": 0, "time": 0.0, "frameNumber": 0, "outputPath": "..." },
    { "index": 1, "time": 0.75, "frameNumber": 22-23, "outputPath": "..." },
    { "index": 2, "time": 1.5, "frameNumber": 45, "outputPath": "..." },
    { "index": 3, "time": 2.25, "frameNumber": 67-68, "outputPath": "..." },
    { "index": 4, "time": 3.0, "frameNumber": 90, "outputPath": "..." }
  ]
}

Step 4: Verify files
- Check session directory exists
- Verify all 5 PNG files exist
- Files named: frame_<frameNumber>.png

PASS CRITERIA:
✓ 5 frames rendered
✓ Evenly distributed between 0-3 seconds
✓ All files exist in session directory


TEST 6: Sampled Frames (sampleFps)
-----------------------------------
Purpose: Verify FPS-based sampling

Step 1: Call render-frames-sampled tool
Parameters:
{
  "comp": "<comp-name>",
  "startTime": 0,
  "endTime": 2,
  "sampleFps": 2,
  "format": "png"
}

Expected: Frames sampled at 2 FPS (every 0.5 seconds)
Should render ~5 frames: 0.0, 0.5, 1.0, 1.5, 2.0

Step 2-4: Same as TEST 5

Verify:
- samplingMode: "sampleFps"
- framesRendered: 5 (approximately)
- Times are 0.5 seconds apart

PASS CRITERIA:
✓ Correct FPS sampling
✓ All files created


TEST 7: Sampled Frames (frameStep)
-----------------------------------
Purpose: Verify frame-step sampling

Step 1: Call render-frames-sampled tool
Parameters:
{
  "comp": "<comp-name>",
  "startTime": 0,
  "endTime": 2,
  "frameStep": 15,
  "format": "png"
}

Expected: Every 15th frame between 0-2 seconds

Step 2-4: Same as TEST 5

Verify:
- samplingMode: "frameStep"
- Frame numbers are multiples of 15
- Correct time range

PASS CRITERIA:
✓ Frame step applied correctly
✓ Files created


TEST 8: Multiple Sampling Strategies (Error Test)
--------------------------------------------------
Purpose: Verify mutual exclusivity validation

Step 1: Call render-frames-sampled tool
Parameters:
{
  "comp": "<comp-name>",
  "startTime": 0,
  "endTime": 5,
  "sampleCount": 5,
  "sampleFps": 2
}

Expected Response:
- isError: true
- Error message: "Only one sampling strategy... can be specified"

PASS CRITERIA:
✓ Error returned (not queued)
✓ Clear error message


TEST 9: Invalid Composition Name (Error Test)
----------------------------------------------
Purpose: Verify error handling for missing comp

Step 1: Call render-frame tool
Parameters:
{
  "comp": "NonExistentComposition12345",
  "format": "png"
}

Expected: Command queued successfully (no immediate error)

Step 2: Wait briefly, call get-results

Expected Response:
{
  "success": false,
  "error": "Composition 'NonExistentComposition12345' not found"
}

PASS CRITERIA:
✓ Command queues without error
✓ Panel returns error in results
✓ Error message is clear


TEST 10: Invalid Time Range (Error Test)
-----------------------------------------
Purpose: Verify time range validation

Step 1: Call render-frames-sampled tool
Parameters:
{
  "comp": "<comp-name>",
  "startTime": 5,
  "endTime": 2,
  "sampleCount": 5
}

Expected Response:
- isError: true
- Error: "endTime must be greater than startTime"

PASS CRITERIA:
✓ Validation error before queuing
✓ Clear error message


TEST 11: MaxFrames Truncation
------------------------------
Purpose: Verify maxFrames limit

⚠️ FIX APPLIED: Output module naming conflict resolved

Step 1: Call render-frames-sampled tool
Parameters:
{
  "comp": "<comp-name>",
  "startTime": 0,
  "endTime": 5,
  "sampleFps": 30,
  "maxFrames": 10
}

Expected: Would sample ~150 frames, but truncates to 10
(Note: Using endTime=5 to stay within typical comp duration)

Step 2-4: Same as TEST 5

Verify in results:
- "warning": "Requested 150 frames, truncated to maxFrames=10"
- framesRendered: 10
- Only 10 files created
- NO "output module name already in use" error

PASS CRITERIA:
✓ Warning message present
✓ Only 10 frames rendered
✓ No errors
✓ No output module naming conflicts


TEST 12: Inline Data with Multiple Frames
------------------------------------------
Purpose: Verify inlineMax parameter

⚠️ FIX APPLIED: Output module naming conflict resolved

Step 1: Call render-frames-sampled tool
Parameters:
{
  "comp": "<comp-name>",
  "startTime": 0,
  "endTime": 2,
  "sampleCount": 5,
  "inline": true,
  "inlineMax": 2,
  "format": "png"
}

Step 2-4: Same as TEST 5

Verify in results:
- frames[0] has "inlineData" field
- frames[1] has "inlineData" field
- frames[2] does NOT have "inlineData" field
- frames[3] does NOT have "inlineData" field
- frames[4] does NOT have "inlineData" field
- NO "output module name already in use" error

PASS CRITERIA:
✓ Only first 2 frames have inline data
✓ Inline data is valid base64
✓ No output module naming conflicts


============================================
FILE VERIFICATION
============================================

After running tests, verify:

1. build/temp/ directory structure:
   - Contains individual frame_*.png/jpg files (from TEST 1-4)
   - Contains session_*/ subdirectories (from TEST 5-7, 11-12)

2. Session directories:
   - Each contains multiple frame files
   - File naming: <prefix>_<frameNumber>.<format>

3. File integrity:
   - Files are valid images (can be opened)
   - File sizes are reasonable (not 0 bytes)


============================================
TROUBLESHOOTING
============================================

If render-frame or render-frames-sampled returns an error immediately:
→ This is expected for validation errors (TEST 8, 10)
→ Check error message for details

If command queues but get-results shows error:
→ Check error message (likely comp not found, or time out of range)
→ Verify composition name is correct
→ Verify project is open in After Effects

If command queues but get-results returns nothing:
→ Panel may not be running or auto-run disabled
→ Check MCP Bridge Auto panel status
→ Look for panel logs in After Effects

If files are not created:
→ Check After Effects render queue for errors
→ Verify build/temp/ directory is writable
→ Check panel logs for exceptions


============================================
SUCCESS CRITERIA
============================================

ALL TESTS PASS IF:
✓ TEST 1-4: Single frame renders work with all parameter variations
✓ TEST 5-7: Multi-frame sampling works with all strategies
✓ TEST 8-10: Error handling works correctly
✓ TEST 11: MaxFrames truncation works
✓ TEST 12: Inline data respects inlineMax limit
✓ All rendered files exist and are valid images
✓ Panel executes commands in current project (no new project opened)


============================================
REPORTING RESULTS
============================================

For each test, report:
1. Test number and name
2. Pass/Fail status
3. If failed: Error message or unexpected behavior
4. Any warnings or edge cases observed

Example report format:
TEST 1: Single Frame Render (Basic) - PASS
- Command queued successfully
- Render completed in 15 seconds
- File created: build/temp/frame_1759012345678_a1b2c3d4.png
- File size: 234 KB

TEST 9: Invalid Composition Name - PASS
- Error handled correctly
- Message: "Composition 'NonExistentComposition12345' not found"